  0:	proc  - (:root:) creates proc  0 (:init:)
ltl singleBallForever: <> ([] (((ballsInTheAir+ballsWithPlayer)==1)))
ltl initiallyNoBallsMustNotFailForCredit: (((ballsInTheAir+ballsWithPlayer)==0)) && ([] (1))
ltl allBallsCannotBeConstantMustNotFailForCredit: (((! ([] (((ballsInTheAir+ballsWithPlayer)==0)))) && (! ([] (((ballsInTheAir+ballsWithPlayer)==1))))) && (! ([] (((ballsInTheAir+ballsWithPlayer)==2))))) && ([] (1))
Starting Referee with pid 1
  1:	proc  0 (:init::1) creates proc  1 (Referee)
  1:	proc  0 (:init::1) Pingpong.pml:64 (state 1)	[(run Referee())]

  2:	proc  1 (Referee:1) Pingpong.pml:42 (state 1)	[ballsInTheAir = (ballsInTheAir+1)]
		ballsInTheAir = 1
  3:	proc  1 (Referee:1) Pingpong.pml:43 (state -)	[values: 1!BALL]
  3:	proc  1 (Referee:1) Pingpong.pml:43 (state 2)	[ptoP[0]!BALL]
		queue 1 (ptoP[0]): [BALL]
		queue 2 (ptoP[1]): 

Starting Player with pid 2
  4:	proc  0 (:init::1) creates proc  2 (Player)
  4:	proc  0 (:init::1) Pingpong.pml:65 (state 2)	[(run Player(0))]

  5:	proc  2 (Player:1) Pingpong.pml:50 (state -)	[values: 1?BALL]
  5:	proc  2 (Player:1) Pingpong.pml:50 (state 1)	[ptoP[i]?BALL]
		queue 1 (ptoP[0]): 
  6:	proc  2 (Player:1) Pingpong.pml:51 (state 2)	[ballsInTheAir = (ballsInTheAir-1)]
		ballsInTheAir = 0
  7:	proc  2 (Player:1) Pingpong.pml:52 (state 3)	[ballsWithPlayer = (ballsWithPlayer+1)]
		ballsWithPlayer = 1

  8:	proc  2 (Player:1) Pingpong.pml:55 (state 5)	[ballsInTheAir = (ballsInTheAir+1)]
		ballsInTheAir = 1
  9:	proc  2 (Player:1) Pingpong.pml:56 (state 6)	[ballsWithPlayer = (ballsWithPlayer-1)]
		ballsWithPlayer = 0
 10:	proc  2 (Player:1) Pingpong.pml:57 (state -)	[values: 2!BALL]
 10:	proc  2 (Player:1) Pingpong.pml:57 (state 7)	[ptoP[(1-i)]!BALL]
		queue 2 (ptoP[1]): [BALL]

Starting Player with pid 3
 11:	proc  0 (:init::1) creates proc  3 (Player)
 11:	proc  0 (:init::1) Pingpong.pml:66 (state 3)	[(run Player(1))]

 12:	proc  3 (Player:1) Pingpong.pml:50 (state -)	[values: 2?BALL]
 12:	proc  3 (Player:1) Pingpong.pml:50 (state 1)	[ptoP[i]?BALL]
		queue 2 (ptoP[1]): 
 13:	proc  3 (Player:1) Pingpong.pml:51 (state 2)	[ballsInTheAir = (ballsInTheAir-1)]
		ballsInTheAir = 0
 14:	proc  3 (Player:1) Pingpong.pml:52 (state 3)	[ballsWithPlayer = (ballsWithPlayer+1)]
		ballsWithPlayer = 1

 15:	proc  3 (Player:1) Pingpong.pml:55 (state 5)	[ballsInTheAir = (ballsInTheAir+1)]
		ballsInTheAir = 1
 16:	proc  3 (Player:1) Pingpong.pml:56 (state 6)	[ballsWithPlayer = (ballsWithPlayer-1)]
		ballsWithPlayer = 0
 17:	proc  3 (Player:1) Pingpong.pml:57 (state -)	[values: 1!BALL]
 17:	proc  3 (Player:1) Pingpong.pml:57 (state 7)	[ptoP[(1-i)]!BALL]
		queue 1 (ptoP[0]): [BALL]

 18:	proc  2 (Player:1) Pingpong.pml:50 (state -)	[values: 1?BALL]
 18:	proc  2 (Player:1) Pingpong.pml:50 (state 1)	[ptoP[i]?BALL]
		queue 1 (ptoP[0]): 
		queue 2 (ptoP[1]): 
 19:	proc  2 (Player:1) Pingpong.pml:51 (state 2)	[ballsInTheAir = (ballsInTheAir-1)]
		ballsInTheAir = 0
 20:	proc  2 (Player:1) Pingpong.pml:52 (state 3)	[ballsWithPlayer = (ballsWithPlayer+1)]
		ballsWithPlayer = 1

 21:	proc  2 (Player:1) Pingpong.pml:55 (state 5)	[ballsInTheAir = (ballsInTheAir+1)]
		ballsInTheAir = 1
 22:	proc  2 (Player:1) Pingpong.pml:56 (state 6)	[ballsWithPlayer = (ballsWithPlayer-1)]
		ballsWithPlayer = 0
 23:	proc  2 (Player:1) Pingpong.pml:57 (state -)	[values: 2!BALL]
 23:	proc  2 (Player:1) Pingpong.pml:57 (state 7)	[ptoP[(1-i)]!BALL]
		queue 2 (ptoP[1]): [BALL]

 24:	proc  3 (Player:1) Pingpong.pml:50 (state -)	[values: 2?BALL]
 24:	proc  3 (Player:1) Pingpong.pml:50 (state 1)	[ptoP[i]?BALL]
		queue 2 (ptoP[1]): 
 25:	proc  3 (Player:1) Pingpong.pml:51 (state 2)	[ballsInTheAir = (ballsInTheAir-1)]
		ballsInTheAir = 0
 26:	proc  3 (Player:1) Pingpong.pml:52 (state 3)	[ballsWithPlayer = (ballsWithPlayer+1)]
		ballsWithPlayer = 1

 27:	proc  3 (Player:1) Pingpong.pml:55 (state 5)	[ballsInTheAir = (ballsInTheAir+1)]
		ballsInTheAir = 1
 28:	proc  3 (Player:1) Pingpong.pml:56 (state 6)	[ballsWithPlayer = (ballsWithPlayer-1)]
		ballsWithPlayer = 0
 29:	proc  3 (Player:1) Pingpong.pml:57 (state -)	[values: 1!BALL]
 29:	proc  3 (Player:1) Pingpong.pml:57 (state 7)	[ptoP[(1-i)]!BALL]
		queue 1 (ptoP[0]): [BALL]

 30:	proc  2 (Player:1) Pingpong.pml:50 (state -)	[values: 1?BALL]
 30:	proc  2 (Player:1) Pingpong.pml:50 (state 1)	[ptoP[i]?BALL]
		queue 1 (ptoP[0]): 
 31:	proc  2 (Player:1) Pingpong.pml:51 (state 2)	[ballsInTheAir = (ballsInTheAir-1)]
		ballsInTheAir = 0
 32:	proc  2 (Player:1) Pingpong.pml:52 (state 3)	[ballsWithPlayer = (ballsWithPlayer+1)]
		ballsWithPlayer = 1

 33:	proc  2 (Player:1) Pingpong.pml:55 (state 5)	[ballsInTheAir = (ballsInTheAir+1)]
		ballsInTheAir = 1
 34:	proc  2 (Player:1) Pingpong.pml:56 (state 6)	[ballsWithPlayer = (ballsWithPlayer-1)]
		ballsWithPlayer = 0
 35:	proc  2 (Player:1) Pingpong.pml:57 (state -)	[values: 2!BALL]
 35:	proc  2 (Player:1) Pingpong.pml:57 (state 7)	[ptoP[(1-i)]!BALL]
		queue 2 (ptoP[1]): [BALL]

 36:	proc  3 (Player:1) Pingpong.pml:50 (state -)	[values: 2?BALL]
 36:	proc  3 (Player:1) Pingpong.pml:50 (state 1)	[ptoP[i]?BALL]
		queue 1 (ptoP[0]): 
		queue 2 (ptoP[1]): 
 37:	proc  3 (Player:1) Pingpong.pml:51 (state 2)	[ballsInTheAir = (ballsInTheAir-1)]
		ballsInTheAir = 0
 38:	proc  3 (Player:1) Pingpong.pml:52 (state 3)	[ballsWithPlayer = (ballsWithPlayer+1)]
		ballsWithPlayer = 1

 39:	proc  3 (Player:1) Pingpong.pml:55 (state 5)	[ballsInTheAir = (ballsInTheAir+1)]
		ballsInTheAir = 1
 40:	proc  3 (Player:1) Pingpong.pml:56 (state 6)	[ballsWithPlayer = (ballsWithPlayer-1)]
		ballsWithPlayer = 0
 41:	proc  3 (Player:1) Pingpong.pml:57 (state -)	[values: 1!BALL]
 41:	proc  3 (Player:1) Pingpong.pml:57 (state 7)	[ptoP[(1-i)]!BALL]
		queue 1 (ptoP[0]): [BALL]

 42:	proc  2 (Player:1) Pingpong.pml:50 (state -)	[values: 1?BALL]
 42:	proc  2 (Player:1) Pingpong.pml:50 (state 1)	[ptoP[i]?BALL]
		queue 1 (ptoP[0]): 
 43:	proc  2 (Player:1) Pingpong.pml:51 (state 2)	[ballsInTheAir = (ballsInTheAir-1)]
		ballsInTheAir = 0
 44:	proc  2 (Player:1) Pingpong.pml:52 (state 3)	[ballsWithPlayer = (ballsWithPlayer+1)]
		ballsWithPlayer = 1

 45:	proc  2 (Player:1) Pingpong.pml:55 (state 5)	[ballsInTheAir = (ballsInTheAir+1)]
		ballsInTheAir = 1
 46:	proc  2 (Player:1) Pingpong.pml:56 (state 6)	[ballsWithPlayer = (ballsWithPlayer-1)]
		ballsWithPlayer = 0
 47:	proc  2 (Player:1) Pingpong.pml:57 (state -)	[values: 2!BALL]
 47:	proc  2 (Player:1) Pingpong.pml:57 (state 7)	[ptoP[(1-i)]!BALL]
		queue 2 (ptoP[1]): [BALL]

 48:	proc  3 (Player:1) Pingpong.pml:50 (state -)	[values: 2?BALL]
 48:	proc  3 (Player:1) Pingpong.pml:50 (state 1)	[ptoP[i]?BALL]
		queue 1 (ptoP[0]): 
		queue 2 (ptoP[1]): 
 49:	proc  3 (Player:1) Pingpong.pml:51 (state 2)	[ballsInTheAir = (ballsInTheAir-1)]
		ballsInTheAir = 0
 50:	proc  3 (Player:1) Pingpong.pml:52 (state 3)	[ballsWithPlayer = (ballsWithPlayer+1)]
		ballsWithPlayer = 1

 51:	proc  3 (Player:1) Pingpong.pml:55 (state 5)	[ballsInTheAir = (ballsInTheAir+1)]
		ballsInTheAir = 1
 52:	proc  3 (Player:1) Pingpong.pml:56 (state 6)	[ballsWithPlayer = (ballsWithPlayer-1)]
		ballsWithPlayer = 0
 53:	proc  3 (Player:1) Pingpong.pml:57 (state -)	[values: 1!BALL]
 53:	proc  3 (Player:1) Pingpong.pml:57 (state 7)	[ptoP[(1-i)]!BALL]
		queue 1 (ptoP[0]): [BALL]

 54:	proc  2 (Player:1) Pingpong.pml:50 (state -)	[values: 1?BALL]
 54:	proc  2 (Player:1) Pingpong.pml:50 (state 1)	[ptoP[i]?BALL]
		queue 1 (ptoP[0]): 
		queue 2 (ptoP[1]): 
 55:	proc  2 (Player:1) Pingpong.pml:51 (state 2)	[ballsInTheAir = (ballsInTheAir-1)]
		ballsInTheAir = 0
 56:	proc  2 (Player:1) Pingpong.pml:52 (state 3)	[ballsWithPlayer = (ballsWithPlayer+1)]
		ballsWithPlayer = 1

 57:	proc  2 (Player:1) Pingpong.pml:55 (state 5)	[ballsInTheAir = (ballsInTheAir+1)]
		ballsInTheAir = 1
 58:	proc  2 (Player:1) Pingpong.pml:56 (state 6)	[ballsWithPlayer = (ballsWithPlayer-1)]
		ballsWithPlayer = 0
 59:	proc  2 (Player:1) Pingpong.pml:57 (state -)	[values: 2!BALL]
 59:	proc  2 (Player:1) Pingpong.pml:57 (state 7)	[ptoP[(1-i)]!BALL]
		queue 2 (ptoP[1]): [BALL]

 60:	proc  3 (Player:1) Pingpong.pml:50 (state -)	[values: 2?BALL]
 60:	proc  3 (Player:1) Pingpong.pml:50 (state 1)	[ptoP[i]?BALL]
		queue 1 (ptoP[0]): 
		queue 2 (ptoP[1]): 
 61:	proc  3 (Player:1) Pingpong.pml:51 (state 2)	[ballsInTheAir = (ballsInTheAir-1)]
		ballsInTheAir = 0
 62:	proc  3 (Player:1) Pingpong.pml:52 (state 3)	[ballsWithPlayer = (ballsWithPlayer+1)]
		ballsWithPlayer = 1

 63:	proc  3 (Player:1) Pingpong.pml:55 (state 5)	[ballsInTheAir = (ballsInTheAir+1)]
		ballsInTheAir = 1
 64:	proc  3 (Player:1) Pingpong.pml:56 (state 6)	[ballsWithPlayer = (ballsWithPlayer-1)]
		ballsWithPlayer = 0
 65:	proc  3 (Player:1) Pingpong.pml:57 (state -)	[values: 1!BALL]
 65:	proc  3 (Player:1) Pingpong.pml:57 (state 7)	[ptoP[(1-i)]!BALL]
		queue 1 (ptoP[0]): [BALL]

 66:	proc  2 (Player:1) Pingpong.pml:50 (state -)	[values: 1?BALL]
 66:	proc  2 (Player:1) Pingpong.pml:50 (state 1)	[ptoP[i]?BALL]
		queue 1 (ptoP[0]): 
 67:	proc  2 (Player:1) Pingpong.pml:51 (state 2)	[ballsInTheAir = (ballsInTheAir-1)]
		ballsInTheAir = 0
 68:	proc  2 (Player:1) Pingpong.pml:52 (state 3)	[ballsWithPlayer = (ballsWithPlayer+1)]
		ballsWithPlayer = 1

 69:	proc  2 (Player:1) Pingpong.pml:55 (state 5)	[ballsInTheAir = (ballsInTheAir+1)]
		ballsInTheAir = 1
 70:	proc  2 (Player:1) Pingpong.pml:56 (state 6)	[ballsWithPlayer = (ballsWithPlayer-1)]
		ballsWithPlayer = 0
 71:	proc  2 (Player:1) Pingpong.pml:57 (state -)	[values: 2!BALL]
 71:	proc  2 (Player:1) Pingpong.pml:57 (state 7)	[ptoP[(1-i)]!BALL]
		queue 2 (ptoP[1]): [BALL]

 72:	proc  3 (Player:1) Pingpong.pml:50 (state -)	[values: 2?BALL]
 72:	proc  3 (Player:1) Pingpong.pml:50 (state 1)	[ptoP[i]?BALL]
		queue 2 (ptoP[1]): 
 73:	proc  3 (Player:1) Pingpong.pml:51 (state 2)	[ballsInTheAir = (ballsInTheAir-1)]
		ballsInTheAir = 0
 74:	proc  3 (Player:1) Pingpong.pml:52 (state 3)	[ballsWithPlayer = (ballsWithPlayer+1)]
		ballsWithPlayer = 1

 75:	proc  3 (Player:1) Pingpong.pml:55 (state 5)	[ballsInTheAir = (ballsInTheAir+1)]
		ballsInTheAir = 1
 76:	proc  3 (Player:1) Pingpong.pml:56 (state 6)	[ballsWithPlayer = (ballsWithPlayer-1)]
		ballsWithPlayer = 0
 77:	proc  3 (Player:1) Pingpong.pml:57 (state -)	[values: 1!BALL]
 77:	proc  3 (Player:1) Pingpong.pml:57 (state 7)	[ptoP[(1-i)]!BALL]
		queue 1 (ptoP[0]): [BALL]

 78:	proc  2 (Player:1) Pingpong.pml:50 (state -)	[values: 1?BALL]
 78:	proc  2 (Player:1) Pingpong.pml:50 (state 1)	[ptoP[i]?BALL]
		queue 1 (ptoP[0]): 
		queue 2 (ptoP[1]): 
 79:	proc  2 (Player:1) Pingpong.pml:51 (state 2)	[ballsInTheAir = (ballsInTheAir-1)]
		ballsInTheAir = 0
 80:	proc  2 (Player:1) Pingpong.pml:52 (state 3)	[ballsWithPlayer = (ballsWithPlayer+1)]
		ballsWithPlayer = 1

 81:	proc  2 (Player:1) Pingpong.pml:55 (state 5)	[ballsInTheAir = (ballsInTheAir+1)]
		ballsInTheAir = 1
 82:	proc  2 (Player:1) Pingpong.pml:56 (state 6)	[ballsWithPlayer = (ballsWithPlayer-1)]
		ballsWithPlayer = 0
 83:	proc  2 (Player:1) Pingpong.pml:57 (state -)	[values: 2!BALL]
 83:	proc  2 (Player:1) Pingpong.pml:57 (state 7)	[ptoP[(1-i)]!BALL]
		queue 2 (ptoP[1]): [BALL]

 84:	proc  3 (Player:1) Pingpong.pml:50 (state -)	[values: 2?BALL]
 84:	proc  3 (Player:1) Pingpong.pml:50 (state 1)	[ptoP[i]?BALL]
		queue 2 (ptoP[1]): 
 85:	proc  3 (Player:1) Pingpong.pml:51 (state 2)	[ballsInTheAir = (ballsInTheAir-1)]
