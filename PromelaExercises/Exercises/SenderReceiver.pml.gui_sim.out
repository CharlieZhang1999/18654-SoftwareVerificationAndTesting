using statement merging
Starting Sender with pid 1
  1:	proc  0 (:init::1) SenderReceiver.pml:18 (state 1)	[(run Sender())]
		flag = 0

Starting Receiver with pid 2
  2:	proc  0 (:init::1) SenderReceiver.pml:19 (state 2)	[(run Receiver())]
		flag = 0

  3:	proc  1 (Sender:1) SenderReceiver.pml:7 (state -)	[values: 1!MSG]
  3:	proc  1 (Sender:1) SenderReceiver.pml:7 (state 1)	[toR!MSG]
		queue 1 (toR): [MSG]
		flag = 0

  4:	proc  2 (Receiver:1) SenderReceiver.pml:13 (state -)	[values: 1?MSG]
  4:	proc  2 (Receiver:1) SenderReceiver.pml:13 (state 1)	[toR?MSG]
		queue 1 (toR): 
		flag = 0

  5:	proc  2 (Receiver:1) SenderReceiver.pml:14 (state -)	[values: 2!ACK]
  5:	proc  2 (Receiver:1) SenderReceiver.pml:14 (state 2)	[toS!ACK]
		queue 2 (toS): [ACK]
		flag = 0

  6: proc 2 terminates
  7:	proc  1 (Sender:1) SenderReceiver.pml:8 (state -)	[values: 2?ACK]
  7:	proc  1 (Sender:1) SenderReceiver.pml:8 (state 2)	[toS?ACK]
		queue 2 (toS): 
		flag = 0

spin: SenderReceiver.pml:20, Error: assertion violated
spin: text of failed assertion: assert(flag)
#processes: 2
		queue 2 (toS): 
		queue 1 (toR): 
		flag = 0
  8:	proc  1 (Sender:1) SenderReceiver.pml:9 (state 3)
  8:	proc  0 (:init::1) SenderReceiver.pml:20 (state 3)
3 processes created
Exit-Status 0
