using statement merging
Starting Sender with pid 1
  1:	proc  0 (:init::1) Model8.pml:63 (state 1)	[(run Sender(0,0))]
		finished[0] = 0
		finished[1] = 0
		count[0] = 0
		count[1] = 0
		lastReceived = 2
		bitSent = 0

Starting Sender with pid 2
  2:	proc  0 (:init::1) Model8.pml:64 (state 2)	[(run Sender(1,1))]
		finished[0] = 0
		finished[1] = 0
		count[0] = 0
		count[1] = 0
		lastReceived = 2
		bitSent = 0

Starting Receiver with pid 3
  3:	proc  0 (:init::1) Model8.pml:65 (state 3)	[(run Receiver())]
		finished[0] = 0
		finished[1] = 0
		count[0] = 0
		count[1] = 0
		lastReceived = 2
		bitSent = 0

  4:	proc  2 (Sender:1) Model8.pml:14 (state -)	[values: 1!1]
  4:	proc  2 (Sender:1) Model8.pml:14 (state 3)	[s2r!seq_out]
		queue 1 (s2r): [1]
		finished[0] = 0
		finished[1] = 0
		count[0] = 0
		count[1] = 0
		lastReceived = 2
		bitSent = 0
		Sender(2):id = 1
		Sender(2):seq_out = 1

  5:	proc  3 (Receiver:1) Model8.pml:30 (state -)	[values: 1?1]
  5:	proc  3 (Receiver:1) Model8.pml:30 (state 1)	[s2r?received]
		queue 1 (s2r): 
		finished[0] = 0
		finished[1] = 0
		count[0] = 0
		count[1] = 0
		lastReceived = 2
		bitSent = 0
		Receiver(3):received = 1

  6:	proc  3 (Receiver:1) Model8.pml:38 (state 6)	[(((received==1)&&(lastReceived!=1)))]
		finished[0] = 0
		finished[1] = 0
		count[0] = 0
		count[1] = 0
		lastReceived = 2
		bitSent = 0
		Receiver(3):received = 1

  7:	proc  3 (Receiver:1) Model8.pml:39 (state 9)	[count[1] = (count[1]+1)]
		finished[0] = 0
		finished[1] = 0
		count[0] = 0
		count[1] = 1
		lastReceived = 2
		bitSent = 0
		Receiver(3):received = 1

  7:	proc  3 (Receiver:1) Model8.pml:41 (state 8)	[lastReceived = received]
		finished[0] = 0
		finished[1] = 0
		count[0] = 0
		count[1] = 1
		lastReceived = 1
		bitSent = 0
		Receiver(3):received = 1

  8:	proc  3 (Receiver:1) Model8.pml:45 (state 14)	[assert((((count[0]-count[1])<=1)&&((count[1]-count[0])<=1)))]
		finished[0] = 0
		finished[1] = 0
		count[0] = 0
		count[1] = 1
		lastReceived = 1
		bitSent = 0
		Receiver(3):received = 1

  9:	proc  2 (Sender:1) Model8.pml:17 (state 8)	[seq_out = (1-seq_out)]
		finished[0] = 0
		finished[1] = 0
		count[0] = 0
		count[1] = 1
		lastReceived = 1
		bitSent = 0
		Sender(2):id = 1
		Sender(2):seq_out = 0

  9:	proc  2 (Sender:1) Model8.pml:17 (state 7)	[bitSent = (bitSent+1)]
		finished[0] = 0
		finished[1] = 0
		count[0] = 0
		count[1] = 1
		lastReceived = 1
		bitSent = 1
		Sender(2):id = 1
		Sender(2):seq_out = 0

 10:	proc  2 (Sender:1) Model8.pml:17 (state 9)	[(1)]
		finished[0] = 0
		finished[1] = 0
		count[0] = 0
		count[1] = 1
		lastReceived = 1
		bitSent = 1
		Sender(2):id = 1
		Sender(2):seq_out = 0

 11:	proc  2 (Sender:1) Model8.pml:14 (state -)	[values: 1!0]
 11:	proc  2 (Sender:1) Model8.pml:14 (state 3)	[s2r!seq_out]
		queue 1 (s2r): [0]
		finished[0] = 0
		finished[1] = 0
		count[0] = 0
		count[1] = 1
		lastReceived = 1
		bitSent = 1
		Sender(2):id = 1
		Sender(2):seq_out = 0

 12:	proc  3 (Receiver:1) Model8.pml:30 (state -)	[values: 1?0]
 12:	proc  3 (Receiver:1) Model8.pml:30 (state 1)	[s2r?received]
		queue 1 (s2r): 
		finished[0] = 0
		finished[1] = 0
		count[0] = 0
		count[1] = 1
		lastReceived = 1
		bitSent = 1
		Receiver(3):received = 0

 13:	proc  3 (Receiver:1) Model8.pml:32 (state 2)	[(((received==0)&&(lastReceived!=0)))]
		finished[0] = 0
		finished[1] = 0
		count[0] = 0
		count[1] = 1
		lastReceived = 1
		bitSent = 1
		Receiver(3):received = 0

 14:	proc  3 (Receiver:1) Model8.pml:33 (state 5)	[count[0] = (count[0]+1)]
		finished[0] = 0
		finished[1] = 0
		count[0] = 1
		count[1] = 1
		lastReceived = 1
		bitSent = 1
		Receiver(3):received = 0

 14:	proc  3 (Receiver:1) Model8.pml:35 (state 4)	[lastReceived = received]
		finished[0] = 0
		finished[1] = 0
		count[0] = 1
		count[1] = 1
		lastReceived = 0
		bitSent = 1
		Receiver(3):received = 0

 15:	proc  3 (Receiver:1) Model8.pml:45 (state 14)	[assert((((count[0]-count[1])<=1)&&((count[1]-count[0])<=1)))]
		finished[0] = 0
		finished[1] = 0
		count[0] = 1
		count[1] = 1
		lastReceived = 0
		bitSent = 1
		Receiver(3):received = 0

 16:	proc  2 (Sender:1) Model8.pml:17 (state 8)	[seq_out = (1-seq_out)]
		finished[0] = 0
		finished[1] = 0
		count[0] = 1
		count[1] = 1
		lastReceived = 0
		bitSent = 1
		Sender(2):id = 1
		Sender(2):seq_out = 1

 16:	proc  2 (Sender:1) Model8.pml:17 (state 7)	[bitSent = (bitSent+1)]
		finished[0] = 0
		finished[1] = 0
		count[0] = 1
		count[1] = 1
		lastReceived = 0
		bitSent = 2
		Sender(2):id = 1
		Sender(2):seq_out = 1

 17:	proc  2 (Sender:1) Model8.pml:17 (state 9)	[(1)]
		finished[0] = 0
		finished[1] = 0
		count[0] = 1
		count[1] = 1
		lastReceived = 0
		bitSent = 2
		Sender(2):id = 1
		Sender(2):seq_out = 1

 18:	proc  2 (Sender:1) Model8.pml:14 (state -)	[values: 1!1]
 18:	proc  2 (Sender:1) Model8.pml:14 (state 3)	[s2r!seq_out]
		queue 1 (s2r): [1]
		finished[0] = 0
		finished[1] = 0
		count[0] = 1
		count[1] = 1
		lastReceived = 0
		bitSent = 2
		Sender(2):id = 1
		Sender(2):seq_out = 1

 19:	proc  3 (Receiver:1) Model8.pml:30 (state -)	[values: 1?1]
 19:	proc  3 (Receiver:1) Model8.pml:30 (state 1)	[s2r?received]
		queue 1 (s2r): 
		finished[0] = 0
		finished[1] = 0
		count[0] = 1
		count[1] = 1
		lastReceived = 0
		bitSent = 2
		Receiver(3):received = 1

 20:	proc  3 (Receiver:1) Model8.pml:38 (state 6)	[(((received==1)&&(lastReceived!=1)))]
		finished[0] = 0
		finished[1] = 0
		count[0] = 1
		count[1] = 1
		lastReceived = 0
		bitSent = 2
		Receiver(3):received = 1

 21:	proc  3 (Receiver:1) Model8.pml:39 (state 9)	[count[1] = (count[1]+1)]
		finished[0] = 0
		finished[1] = 0
		count[0] = 1
		count[1] = 2
		lastReceived = 0
		bitSent = 2
		Receiver(3):received = 1

 21:	proc  3 (Receiver:1) Model8.pml:41 (state 8)	[lastReceived = received]
		finished[0] = 0
		finished[1] = 0
		count[0] = 1
		count[1] = 2
		lastReceived = 1
		bitSent = 2
		Receiver(3):received = 1

 22:	proc  3 (Receiver:1) Model8.pml:45 (state 14)	[assert((((count[0]-count[1])<=1)&&((count[1]-count[0])<=1)))]
		finished[0] = 0
		finished[1] = 0
		count[0] = 1
		count[1] = 2
		lastReceived = 1
		bitSent = 2
		Receiver(3):received = 1

 23:	proc  2 (Sender:1) Model8.pml:17 (state 8)	[seq_out = (1-seq_out)]
		finished[0] = 0
		finished[1] = 0
		count[0] = 1
		count[1] = 2
		lastReceived = 1
		bitSent = 2
		Sender(2):id = 1
		Sender(2):seq_out = 0

 23:	proc  2 (Sender:1) Model8.pml:17 (state 7)	[bitSent = (bitSent+1)]
		finished[0] = 0
		finished[1] = 0
		count[0] = 1
		count[1] = 2
		lastReceived = 1
		bitSent = 3
		Sender(2):id = 1
		Sender(2):seq_out = 0

 24:	proc  2 (Sender:1) Model8.pml:17 (state 9)	[(1)]
		finished[0] = 0
		finished[1] = 0
		count[0] = 1
		count[1] = 2
		lastReceived = 1
		bitSent = 3
		Sender(2):id = 1
		Sender(2):seq_out = 0

 25:	proc  2 (Sender:1) Model8.pml:14 (state -)	[values: 1!0]
 25:	proc  2 (Sender:1) Model8.pml:14 (state 3)	[s2r!seq_out]
		queue 1 (s2r): [0]
		finished[0] = 0
		finished[1] = 0
		count[0] = 1
		count[1] = 2
		lastReceived = 1
		bitSent = 3
		Sender(2):id = 1
		Sender(2):seq_out = 0

 26:	proc  3 (Receiver:1) Model8.pml:30 (state -)	[values: 1?0]
 26:	proc  3 (Receiver:1) Model8.pml:30 (state 1)	[s2r?received]
		queue 1 (s2r): 
		finished[0] = 0
		finished[1] = 0
		count[0] = 1
		count[1] = 2
		lastReceived = 1
		bitSent = 3
		Receiver(3):received = 0

 27:	proc  3 (Receiver:1) Model8.pml:32 (state 2)	[(((received==0)&&(lastReceived!=0)))]
		finished[0] = 0
		finished[1] = 0
		count[0] = 1
		count[1] = 2
		lastReceived = 1
		bitSent = 3
		Receiver(3):received = 0

 28:	proc  3 (Receiver:1) Model8.pml:33 (state 5)	[count[0] = (count[0]+1)]
		finished[0] = 0
		finished[1] = 0
		count[0] = 2
		count[1] = 2
		lastReceived = 1
		bitSent = 3
		Receiver(3):received = 0

 28:	proc  3 (Receiver:1) Model8.pml:35 (state 4)	[lastReceived = received]
		finished[0] = 0
		finished[1] = 0
		count[0] = 2
		count[1] = 2
		lastReceived = 0
		bitSent = 3
		Receiver(3):received = 0

 29:	proc  3 (Receiver:1) Model8.pml:45 (state 14)	[assert((((count[0]-count[1])<=1)&&((count[1]-count[0])<=1)))]
		finished[0] = 0
		finished[1] = 0
		count[0] = 2
		count[1] = 2
		lastReceived = 0
		bitSent = 3
		Receiver(3):received = 0

 30:	proc  2 (Sender:1) Model8.pml:17 (state 8)	[seq_out = (1-seq_out)]
		finished[0] = 0
		finished[1] = 0
		count[0] = 2
		count[1] = 2
		lastReceived = 0
		bitSent = 3
		Sender(2):id = 1
		Sender(2):seq_out = 1

 30:	proc  2 (Sender:1) Model8.pml:17 (state 7)	[bitSent = (bitSent+1)]
		finished[0] = 0
		finished[1] = 0
		count[0] = 2
		count[1] = 2
		lastReceived = 0
		bitSent = 4
		Sender(2):id = 1
		Sender(2):seq_out = 1

 31:	proc  2 (Sender:1) Model8.pml:17 (state 9)	[(1)]
		finished[0] = 0
		finished[1] = 0
		count[0] = 2
		count[1] = 2
		lastReceived = 0
		bitSent = 4
		Sender(2):id = 1
		Sender(2):seq_out = 1

 32:	proc  2 (Sender:1) Model8.pml:14 (state -)	[values: 1!1]
 32:	proc  2 (Sender:1) Model8.pml:14 (state 3)	[s2r!seq_out]
		queue 1 (s2r): [1]
		finished[0] = 0
		finished[1] = 0
		count[0] = 2
		count[1] = 2
		lastReceived = 0
		bitSent = 4
		Sender(2):id = 1
		Sender(2):seq_out = 1

 33:	proc  3 (Receiver:1) Model8.pml:30 (state -)	[values: 1?1]
 33:	proc  3 (Receiver:1) Model8.pml:30 (state 1)	[s2r?received]
		queue 1 (s2r): 
		finished[0] = 0
		finished[1] = 0
		count[0] = 2
		count[1] = 2
		lastReceived = 0
		bitSent = 4
		Receiver(3):received = 1

 34:	proc  3 (Receiver:1) Model8.pml:38 (state 6)	[(((received==1)&&(lastReceived!=1)))]
		finished[0] = 0
		finished[1] = 0
		count[0] = 2
		count[1] = 2
		lastReceived = 0
		bitSent = 4
		Receiver(3):received = 1

 35:	proc  3 (Receiver:1) Model8.pml:39 (state 9)	[count[1] = (count[1]+1)]
		finished[0] = 0
		finished[1] = 0
		count[0] = 2
		count[1] = 3
		lastReceived = 0
		bitSent = 4
		Receiver(3):received = 1

 35:	proc  3 (Receiver:1) Model8.pml:41 (state 8)	[lastReceived = received]
		finished[0] = 0
		finished[1] = 0
		count[0] = 2
		count[1] = 3
		lastReceived = 1
		bitSent = 4
		Receiver(3):received = 1

 36:	proc  3 (Receiver:1) Model8.pml:45 (state 14)	[assert((((count[0]-count[1])<=1)&&((count[1]-count[0])<=1)))]
		finished[0] = 0
		finished[1] = 0
		count[0] = 2
		count[1] = 3
		lastReceived = 1
		bitSent = 4
		Receiver(3):received = 1

 37:	proc  2 (Sender:1) Model8.pml:17 (state 8)	[seq_out = (1-seq_out)]
		finished[0] = 0
		finished[1] = 0
		count[0] = 2
		count[1] = 3
		lastReceived = 1
		bitSent = 4
		Sender(2):id = 1
		Sender(2):seq_out = 0

 37:	proc  2 (Sender:1) Model8.pml:17 (state 7)	[bitSent = (bitSent+1)]
		finished[0] = 0
		finished[1] = 0
		count[0] = 2
		count[1] = 3
		lastReceived = 1
		bitSent = 5
		Sender(2):id = 1
		Sender(2):seq_out = 0

 38:	proc  2 (Sender:1) Model8.pml:17 (state 9)	[(1)]
		finished[0] = 0
		finished[1] = 0
		count[0] = 2
		count[1] = 3
		lastReceived = 1
		bitSent = 5
		Sender(2):id = 1
		Sender(2):seq_out = 0

 39:	proc  2 (Sender:1) Model8.pml:14 (state -)	[values: 1!0]
 39:	proc  2 (Sender:1) Model8.pml:14 (state 3)	[s2r!seq_out]
		queue 1 (s2r): [0]
		finished[0] = 0
		finished[1] = 0
		count[0] = 2
		count[1] = 3
		lastReceived = 1
		bitSent = 5
		Sender(2):id = 1
		Sender(2):seq_out = 0

 40:	proc  3 (Receiver:1) Model8.pml:30 (state -)	[values: 1?0]
 40:	proc  3 (Receiver:1) Model8.pml:30 (state 1)	[s2r?received]
		queue 1 (s2r): 
		finished[0] = 0
		finished[1] = 0
		count[0] = 2
		count[1] = 3
		lastReceived = 1
		bitSent = 5
		Receiver(3):received = 0

 41:	proc  3 (Receiver:1) Model8.pml:32 (state 2)	[(((received==0)&&(lastReceived!=0)))]
		finished[0] = 0
		finished[1] = 0
		count[0] = 2
		count[1] = 3
		lastReceived = 1
		bitSent = 5
		Receiver(3):received = 0

 42:	proc  3 (Receiver:1) Model8.pml:33 (state 5)	[count[0] = (count[0]+1)]
		finished[0] = 0
		finished[1] = 0
		count[0] = 3
		count[1] = 3
		lastReceived = 1
		bitSent = 5
		Receiver(3):received = 0

 42:	proc  3 (Receiver:1) Model8.pml:35 (state 4)	[lastReceived = received]
		finished[0] = 0
		finished[1] = 0
		count[0] = 3
		count[1] = 3
		lastReceived = 0
		bitSent = 5
		Receiver(3):received = 0

 43:	proc  3 (Receiver:1) Model8.pml:45 (state 14)	[assert((((count[0]-count[1])<=1)&&((count[1]-count[0])<=1)))]
		finished[0] = 0
		finished[1] = 0
		count[0] = 3
		count[1] = 3
		lastReceived = 0
		bitSent = 5
		Receiver(3):received = 0

 44:	proc  2 (Sender:1) Model8.pml:17 (state 8)	[seq_out = (1-seq_out)]
		finished[0] = 0
		finished[1] = 0
		count[0] = 3
		count[1] = 3
		lastReceived = 0
		bitSent = 5
		Sender(2):id = 1
		Sender(2):seq_out = 1

 44:	proc  2 (Sender:1) Model8.pml:17 (state 7)	[bitSent = (bitSent+1)]
		finished[0] = 0
		finished[1] = 0
		count[0] = 3
		count[1] = 3
		lastReceived = 0
		bitSent = 6
		Sender(2):id = 1
		Sender(2):seq_out = 1

 45:	proc  2 (Sender:1) Model8.pml:17 (state 9)	[(1)]
		finished[0] = 0
		finished[1] = 0
		count[0] = 3
		count[1] = 3
		lastReceived = 0
		bitSent = 6
		Sender(2):id = 1
		Sender(2):seq_out = 1

 46:	proc  2 (Sender:1) Model8.pml:14 (state -)	[values: 1!1]
 46:	proc  2 (Sender:1) Model8.pml:14 (state 3)	[s2r!seq_out]
		queue 1 (s2r): [1]
		finished[0] = 0
		finished[1] = 0
		count[0] = 3
		count[1] = 3
		lastReceived = 0
		bitSent = 6
		Sender(2):id = 1
		Sender(2):seq_out = 1

 47:	proc  3 (Receiver:1) Model8.pml:30 (state -)	[values: 1?1]
 47:	proc  3 (Receiver:1) Model8.pml:30 (state 1)	[s2r?received]
		queue 1 (s2r): 
		finished[0] = 0
		finished[1] = 0
		count[0] = 3
		count[1] = 3
		lastReceived = 0
		bitSent = 6
		Receiver(3):received = 1

 48:	proc  3 (Receiver:1) Model8.pml:38 (state 6)	[(((received==1)&&(lastReceived!=1)))]
		finished[0] = 0
		finished[1] = 0
		count[0] = 3
		count[1] = 3
		lastReceived = 0
		bitSent = 6
		Receiver(3):received = 1

 49:	proc  3 (Receiver:1) Model8.pml:39 (state 9)	[count[1] = (count[1]+1)]
		finished[0] = 0
		finished[1] = 0
		count[0] = 3
		count[1] = 4
		lastReceived = 0
		bitSent = 6
		Receiver(3):received = 1

 49:	proc  3 (Receiver:1) Model8.pml:41 (state 8)	[lastReceived = received]
		finished[0] = 0
		finished[1] = 0
		count[0] = 3
		count[1] = 4
		lastReceived = 1
		bitSent = 6
		Receiver(3):received = 1

 50:	proc  3 (Receiver:1) Model8.pml:45 (state 14)	[assert((((count[0]-count[1])<=1)&&((count[1]-count[0])<=1)))]
		finished[0] = 0
		finished[1] = 0
		count[0] = 3
		count[1] = 4
		lastReceived = 1
		bitSent = 6
		Receiver(3):received = 1

 51:	proc  2 (Sender:1) Model8.pml:17 (state 8)	[seq_out = (1-seq_out)]
		finished[0] = 0
		finished[1] = 0
		count[0] = 3
		count[1] = 4
		lastReceived = 1
		bitSent = 6
		Sender(2):id = 1
		Sender(2):seq_out = 0

 51:	proc  2 (Sender:1) Model8.pml:17 (state 7)	[bitSent = (bitSent+1)]
		finished[0] = 0
		finished[1] = 0
		count[0] = 3
		count[1] = 4
		lastReceived = 1
		bitSent = 7
		Sender(2):id = 1
		Sender(2):seq_out = 0

 52:	proc  2 (Sender:1) Model8.pml:17 (state 9)	[(1)]
		finished[0] = 0
		finished[1] = 0
		count[0] = 3
		count[1] = 4
		lastReceived = 1
		bitSent = 7
		Sender(2):id = 1
		Sender(2):seq_out = 0

 53:	proc  2 (Sender:1) Model8.pml:14 (state -)	[values: 1!0]
 53:	proc  2 (Sender:1) Model8.pml:14 (state 3)	[s2r!seq_out]
		queue 1 (s2r): [0]
		finished[0] = 0
		finished[1] = 0
		count[0] = 3
		count[1] = 4
		lastReceived = 1
		bitSent = 7
		Sender(2):id = 1
		Sender(2):seq_out = 0

 54:	proc  3 (Receiver:1) Model8.pml:30 (state -)	[values: 1?0]
 54:	proc  3 (Receiver:1) Model8.pml:30 (state 1)	[s2r?received]
		queue 1 (s2r): 
		finished[0] = 0
		finished[1] = 0
		count[0] = 3
		count[1] = 4
		lastReceived = 1
		bitSent = 7
		Receiver(3):received = 0

 55:	proc  3 (Receiver:1) Model8.pml:32 (state 2)	[(((received==0)&&(lastReceived!=0)))]
		finished[0] = 0
		finished[1] = 0
		count[0] = 3
		count[1] = 4
		lastReceived = 1
		bitSent = 7
		Receiver(3):received = 0

 56:	proc  3 (Receiver:1) Model8.pml:33 (state 5)	[count[0] = (count[0]+1)]
		finished[0] = 0
		finished[1] = 0
		count[0] = 4
		count[1] = 4
		lastReceived = 1
		bitSent = 7
		Receiver(3):received = 0

 56:	proc  3 (Receiver:1) Model8.pml:35 (state 4)	[lastReceived = received]
		finished[0] = 0
		finished[1] = 0
		count[0] = 4
		count[1] = 4
		lastReceived = 0
		bitSent = 7
		Receiver(3):received = 0

 57:	proc  3 (Receiver:1) Model8.pml:45 (state 14)	[assert((((count[0]-count[1])<=1)&&((count[1]-count[0])<=1)))]
		finished[0] = 0
		finished[1] = 0
		count[0] = 4
		count[1] = 4
		lastReceived = 0
		bitSent = 7
		Receiver(3):received = 0

 58:	proc  2 (Sender:1) Model8.pml:17 (state 8)	[seq_out = (1-seq_out)]
		finished[0] = 0
		finished[1] = 0
		count[0] = 4
		count[1] = 4
		lastReceived = 0
		bitSent = 7
		Sender(2):id = 1
		Sender(2):seq_out = 1

 58:	proc  2 (Sender:1) Model8.pml:17 (state 7)	[bitSent = (bitSent+1)]
		finished[0] = 0
		finished[1] = 0
		count[0] = 4
		count[1] = 4
		lastReceived = 0
		bitSent = 8
		Sender(2):id = 1
		Sender(2):seq_out = 1

 59:	proc  2 (Sender:1) Model8.pml:17 (state 9)	[(1)]
		finished[0] = 0
		finished[1] = 0
		count[0] = 4
		count[1] = 4
		lastReceived = 0
		bitSent = 8
		Sender(2):id = 1
		Sender(2):seq_out = 1

 60:	proc  2 (Sender:1) Model8.pml:14 (state -)	[values: 1!1]
 60:	proc  2 (Sender:1) Model8.pml:14 (state 3)	[s2r!seq_out]
		queue 1 (s2r): [1]
		finished[0] = 0
		finished[1] = 0
		count[0] = 4
		count[1] = 4
		lastReceived = 0
		bitSent = 8
		Sender(2):id = 1
		Sender(2):seq_out = 1

 61:	proc  3 (Receiver:1) Model8.pml:30 (state -)	[values: 1?1]
 61:	proc  3 (Receiver:1) Model8.pml:30 (state 1)	[s2r?received]
		queue 1 (s2r): 
		finished[0] = 0
		finished[1] = 0
		count[0] = 4
		count[1] = 4
		lastReceived = 0
		bitSent = 8
		Receiver(3):received = 1

 62:	proc  3 (Receiver:1) Model8.pml:38 (state 6)	[(((received==1)&&(lastReceived!=1)))]
		finished[0] = 0
		finished[1] = 0
		count[0] = 4
		count[1] = 4
		lastReceived = 0
		bitSent = 8
		Receiver(3):received = 1

 63:	proc  3 (Receiver:1) Model8.pml:39 (state 9)	[count[1] = (count[1]+1)]
		finished[0] = 0
		finished[1] = 0
		count[0] = 4
		count[1] = 5
		lastReceived = 0
		bitSent = 8
		Receiver(3):received = 1

 63:	proc  3 (Receiver:1) Model8.pml:41 (state 8)	[lastReceived = received]
		finished[0] = 0
		finished[1] = 0
		count[0] = 4
		count[1] = 5
		lastReceived = 1
		bitSent = 8
		Receiver(3):received = 1

 64:	proc  3 (Receiver:1) Model8.pml:45 (state 14)	[assert((((count[0]-count[1])<=1)&&((count[1]-count[0])<=1)))]
		finished[0] = 0
		finished[1] = 0
		count[0] = 4
		count[1] = 5
		lastReceived = 1
		bitSent = 8
		Receiver(3):received = 1

 65:	proc  2 (Sender:1) Model8.pml:17 (state 8)	[seq_out = (1-seq_out)]
		finished[0] = 0
		finished[1] = 0
		count[0] = 4
		count[1] = 5
		lastReceived = 1
		bitSent = 8
		Sender(2):id = 1
		Sender(2):seq_out = 0

 65:	proc  2 (Sender:1) Model8.pml:17 (state 7)	[bitSent = (bitSent+1)]
		finished[0] = 0
		finished[1] = 0
		count[0] = 4
		count[1] = 5
		lastReceived = 1
		bitSent = 9
		Sender(2):id = 1
		Sender(2):seq_out = 0

 66:	proc  2 (Sender:1) Model8.pml:17 (state 9)	[(1)]
		finished[0] = 0
		finished[1] = 0
		count[0] = 4
		count[1] = 5
		lastReceived = 1
		bitSent = 9
		Sender(2):id = 1
		Sender(2):seq_out = 0

 67:	proc  2 (Sender:1) Model8.pml:14 (state -)	[values: 1!0]
 67:	proc  2 (Sender:1) Model8.pml:14 (state 3)	[s2r!seq_out]
		queue 1 (s2r): [0]
		finished[0] = 0
		finished[1] = 0
		count[0] = 4
		count[1] = 5
		lastReceived = 1
		bitSent = 9
		Sender(2):id = 1
		Sender(2):seq_out = 0

 68:	proc  3 (Receiver:1) Model8.pml:30 (state -)	[values: 1?0]
 68:	proc  3 (Receiver:1) Model8.pml:30 (state 1)	[s2r?received]
		queue 1 (s2r): 
		finished[0] = 0
		finished[1] = 0
		count[0] = 4
		count[1] = 5
		lastReceived = 1
		bitSent = 9
		Receiver(3):received = 0

 69:	proc  3 (Receiver:1) Model8.pml:32 (state 2)	[(((received==0)&&(lastReceived!=0)))]
		finished[0] = 0
		finished[1] = 0
		count[0] = 4
		count[1] = 5
		lastReceived = 1
		bitSent = 9
		Receiver(3):received = 0

 70:	proc  3 (Receiver:1) Model8.pml:33 (state 5)	[count[0] = (count[0]+1)]
		finished[0] = 0
		finished[1] = 0
		count[0] = 5
		count[1] = 5
		lastReceived = 1
		bitSent = 9
		Receiver(3):received = 0

 70:	proc  3 (Receiver:1) Model8.pml:35 (state 4)	[lastReceived = received]
		finished[0] = 0
		finished[1] = 0
		count[0] = 5
		count[1] = 5
		lastReceived = 0
		bitSent = 9
		Receiver(3):received = 0

 71:	proc  3 (Receiver:1) Model8.pml:45 (state 14)	[assert((((count[0]-count[1])<=1)&&((count[1]-count[0])<=1)))]
		finished[0] = 0
		finished[1] = 0
		count[0] = 5
		count[1] = 5
		lastReceived = 0
		bitSent = 9
		Receiver(3):received = 0

 72:	proc  2 (Sender:1) Model8.pml:17 (state 8)	[seq_out = (1-seq_out)]
		finished[0] = 0
		finished[1] = 0
		count[0] = 5
		count[1] = 5
		lastReceived = 0
		bitSent = 9
		Sender(2):id = 1
		Sender(2):seq_out = 1

 72:	proc  2 (Sender:1) Model8.pml:17 (state 7)	[bitSent = (bitSent+1)]
		finished[0] = 0
		finished[1] = 0
		count[0] = 5
		count[1] = 5
		lastReceived = 0
		bitSent = 10
		Sender(2):id = 1
		Sender(2):seq_out = 1

 73:	proc  2 (Sender:1) Model8.pml:17 (state 9)	[(1)]
		finished[0] = 0
		finished[1] = 0
		count[0] = 5
		count[1] = 5
		lastReceived = 0
		bitSent = 10
		Sender(2):id = 1
		Sender(2):seq_out = 1

 74:	proc  2 (Sender:1) Model8.pml:14 (state -)	[values: 1!1]
 74:	proc  2 (Sender:1) Model8.pml:14 (state 3)	[s2r!seq_out]
		queue 1 (s2r): [1]
		finished[0] = 0
		finished[1] = 0
		count[0] = 5
		count[1] = 5
		lastReceived = 0
		bitSent = 10
		Sender(2):id = 1
		Sender(2):seq_out = 1

 75:	proc  3 (Receiver:1) Model8.pml:30 (state -)	[values: 1?1]
 75:	proc  3 (Receiver:1) Model8.pml:30 (state 1)	[s2r?received]
		queue 1 (s2r): 
		finished[0] = 0
		finished[1] = 0
		count[0] = 5
		count[1] = 5
		lastReceived = 0
		bitSent = 10
		Receiver(3):received = 1

 76:	proc  3 (Receiver:1) Model8.pml:38 (state 6)	[(((received==1)&&(lastReceived!=1)))]
		finished[0] = 0
		finished[1] = 0
		count[0] = 5
		count[1] = 5
		lastReceived = 0
		bitSent = 10
		Receiver(3):received = 1

 77:	proc  3 (Receiver:1) Model8.pml:39 (state 9)	[count[1] = (count[1]+1)]
		finished[0] = 0
		finished[1] = 0
		count[0] = 5
		count[1] = 6
		lastReceived = 0
		bitSent = 10
		Receiver(3):received = 1

 77:	proc  3 (Receiver:1) Model8.pml:41 (state 8)	[lastReceived = received]
		finished[0] = 0
		finished[1] = 0
		count[0] = 5
		count[1] = 6
		lastReceived = 1
		bitSent = 10
		Receiver(3):received = 1

 78:	proc  3 (Receiver:1) Model8.pml:45 (state 14)	[assert((((count[0]-count[1])<=1)&&((count[1]-count[0])<=1)))]
		finished[0] = 0
		finished[1] = 0
		count[0] = 5
		count[1] = 6
		lastReceived = 1
		bitSent = 10
		Receiver(3):received = 1

 79:	proc  2 (Sender:1) Model8.pml:17 (state 8)	[seq_out = (1-seq_out)]
		finished[0] = 0
		finished[1] = 0
		count[0] = 5
		count[1] = 6
		lastReceived = 1
		bitSent = 10
		Sender(2):id = 1
		Sender(2):seq_out = 0

 79:	proc  2 (Sender:1) Model8.pml:17 (state 7)	[bitSent = (bitSent+1)]
		finished[0] = 0
		finished[1] = 0
		count[0] = 5
		count[1] = 6
		lastReceived = 1
		bitSent = 11
		Sender(2):id = 1
		Sender(2):seq_out = 0

 80:	proc  2 (Sender:1) Model8.pml:17 (state 9)	[(1)]
		finished[0] = 0
		finished[1] = 0
		count[0] = 5
		count[1] = 6
		lastReceived = 1
		bitSent = 11
		Sender(2):id = 1
		Sender(2):seq_out = 0

 81:	proc  2 (Sender:1) Model8.pml:13 (state 1)	[((bitSent>10))]
		finished[0] = 0
		finished[1] = 0
		count[0] = 5
		count[1] = 6
		lastReceived = 1
		bitSent = 11
		Sender(2):id = 1
		Sender(2):seq_out = 0

 82:	proc  2 (Sender:1) Model8.pml:21 (state 17)	[finished[id] = 1]
		finished[0] = 0
		finished[1] = 1
		count[0] = 5
		count[1] = 6
		lastReceived = 1
		bitSent = 11
		Sender(2):id = 1
		Sender(2):seq_out = 0

 83:	proc  1 (Sender:1) Model8.pml:13 (state 1)	[((bitSent>10))]
		finished[0] = 0
		finished[1] = 1
		count[0] = 5
		count[1] = 6
		lastReceived = 1
		bitSent = 11
		Sender(1):id = 0
		Sender(1):seq_out = 0

 84:	proc  1 (Sender:1) Model8.pml:21 (state 17)	[finished[id] = 1]
		finished[0] = 1
		finished[1] = 1
		count[0] = 5
		count[1] = 6
		lastReceived = 1
		bitSent = 11
		Sender(1):id = 0
		Sender(1):seq_out = 0

spin: trail ends after 84 steps
#processes: 4
		queue 1 (s2r): 
		finished[0] = 1
		finished[1] = 1
		count[0] = 5
		count[1] = 6
		lastReceived = 1
		bitSent = 11
 84:	proc  3 (Receiver:1) Model8.pml:29 (state 15)
		Receiver(3):received = 1
 84:	proc  2 (Sender:1) Model8.pml:22 (state 18)
		Sender(2):id = 1
		Sender(2):seq_out = 0
 84:	proc  1 (Sender:1) Model8.pml:22 (state 18)
		Sender(1):id = 0
		Sender(1):seq_out = 0
 84:	proc  0 (:init::1) Model8.pml:66 (state 4)
4 processes created
Exit-Status 0
